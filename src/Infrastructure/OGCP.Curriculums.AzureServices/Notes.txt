AZURE

CREATE A APP SERVICE PLAN
1. create a resource group
2. Create an App service plan inside the resource group (here we can set up scale)
3. Create an App service using azure bash
az webapp create \
  --resource-group M3CurriculumsGroup \
  --plan M3CurriculumsPlan \
  --name M3Curriculums \
  --runtime "DOTNETCORE:8.0"

az webapp deployment source config-local-git \
  --name Curriculums \
  --resource-group M3CurriculumsGroup

Respuesta: https://olicasCV@curriculums.scm.azurewebsites.net/Curriculums.git
4. Setup a user
az webapp deployment user set --user-name olicasCV

Respuesta: {
  "id": null,
  "kind": null,
  "name": "web",
  "publishingPassword": null,
  "publishingPasswordHash": null,
  "publishingPasswordHashSalt": null,
  "publishingUserName": "olicasCV",
  "scmUri": null,
  "type": "Microsoft.Web/publishingUsers/web"
}

Deployement
1. agregar el repo a azure
git remote add azure https://olicasCV@curriculums.scm.azurewebsites.net/Curriculums.git

2. Create a new commit
3. Create a master branch
4. git push azure master


BLOB STORAGE
We can create a cdn to deliver images much faster
cdns also have some caching implementation


PART 1:
1, Crahracteristic
Someone else infrastructure
We do not need to care about hardware, databases, storages, etc
Increase development velocity
Software as a service, pay for what you need
2. Advantages
Easys cale up and down
WE can use AI, IoT services
We can deploy on diferente regions and locations
Not responsable to keeps the ligths on
3.Use cases
Mobile backend
Message brokers
Web apps
Web apis
Whole microservice architecture 
Serverles functions

PART 2: YOUTUBE tutorial - MANUAL DEPLOYMENT
1. Create a resource group
2. Create ann App Service plan
determine the pricing, the CPU power and memory, etc.
we can have more than a web app in a service plan
then we can scale up and down in so far we need to
3. Create an app service
4. Create a sql server database
make it serverless, so when is not use it then it goes down to zero
serverless is great for development porpouses
networking: public endpoint
Enable: Add current client ip address and azure resources access to this server
then we can add our local IP address to talk with azure sql server
5. Create a sql database
get connection strings
create a user-secrets for local dev work
6. Create a publish profile from visual studio
7. Publish the profile
8. Go to app service Environment Variables and add the connection string

PART 3 - BlobStorage
1. Create a blob storage
2. Get access keys and copy to app.settings
3. Add a container to hold images for example
4. Create an azure CDN, so we can catch the images and response faster (Not available for student accounts)